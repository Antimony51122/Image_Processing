

Set up udev rules for device access: 

sudo cp ../platform/linux/udev/90-kinect2.rules /etc/udev/rules.d/

then replug the Kinect.



90-kinect2.rules

/home/rh3014/libfreenect2/platform/linux/udev/90-kinect2.rules


rules.d

/etc/udev/rules.d


Protonect

/home/rh3014/libfreenect2/build/bin/Protonect



https://gist.github.com/rethink-imcmahon/77a1a4d5506258f3dc1f

chmod +x <filename>


```
def main():
    rospy.init_node('image_listener')
    # Define your image topic
    image_topic = "/cameras/left_hand_camera/image"
    # Set up your subscriber and define its callback
    rospy.Subscriber(image_topic, Image, image_callback)
    # Spin until ctrl + c
    rospy.spin()
```

change image_topic to the ros topic that has been subscribed



http://wiki.ros.org/cv_bridge/Tutorials/ConvertingBetweenROSImagesAndOpenCVImagesPython



```
chmod +x ROS_imgProcessing2.py
```

using echo to check whether there is an output from the host master (baxter `export ROS_MASTER_URI=http://192.168.0.110:11311/`) 

```
rostopic echo /camera/depth/image_raw
```
using echo to check whether the output from the remote computer is working
in this case:

```
rostopic echo image_topic_2
```

**Note**: Common Problems:
```
Unable to register with master node [http://localhost:11311/]: master may not be running yet. Will keep trying.
```
to solve this, simply need to run 
```
roscore
```

```
cd /opt/ros/kinetic
source setup.bash
```

**Note**: can't subscribe to the ir and depth at the same instance, due that the depth detection comes from the ir



installations for the vive

```
sudo apt-get install nvidia-384 nvidia-384-dev
```


put `usb_cam` folder into src directory

```
catkin_make
```
compiling the ros packages in the workspace

```
Scanning dependencies of target usb_cam
[ 25%] Building CXX object usb_cam/CMakeFiles/usb_cam.dir/src/usb_cam.cpp.o
[ 50%] Linking CXX shared library /home/rh3014/catkin_ws/devel/lib/libusb_cam.so
[ 50%] Built target usb_cam
Scanning dependencies of target usb_cam_node
[ 75%] Building CXX object usb_cam/CMakeFiles/usb_cam_node.dir/nodes/usb_cam_node.cpp.o
[100%] Linking CXX executable /home/rh3014/catkin_ws/devel/lib/usb_cam/usb_cam_node
[100%] Built target usb_cam_node
```

if not in `.bashrc`

need to `source catkin_ws/devel/setup.bash`

```
roslaunch usb_cam camera.launch
```

in `camera.launch`:

```
<remap from="image" to="/camera1/usb_cam1/image_raw"/>

<remap from="image" to="/camera2/usb_cam2/image_raw"/>
```

defines the cameras

if no camera plugged in, the built in camera will be recognised as one of the cameras.


