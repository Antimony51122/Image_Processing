#!/usr/bin/env python

from __future__ import print_function

import numpy as np
import time
import roslib
import sys
import rospy
import cv2
from sensor_msgs.msg import CompressedImage

class image_converter:

  def __init__(self):
    self.image_sub = rospy.Subscriber("/kinect2/hd/image_color/compressed", CompressedImage, self.callback, queue_size=1)
    self.offset = 70
    self.offset_left_right = 100
    self.is_ok = True

  def callback(self, data):
    vive_image = np.zeros((1200, 2160, 3), dtype=np.uint8)
    np_arr = np.fromstring(data.data, np.uint8)
    cv_image = cv2.imdecode(np_arr, cv2.CV_LOAD_IMAGE_COLOR) # (1080, 1920, 3)
    scale = 0.7
    cv_image = cv2.resize(cv_image, None, fx=scale, fy=scale, interpolation=cv2.INTER_LINEAR)
    shape = cv_image.shape
    vive_image[60:1140, 0:1080]    = cv_image[0:1080, self.offset+0:self.offset+1080]
    vive_image[60:1140, 1080:2160] = cv_image[0:1080, self.offset+self.offset_left_right:self.offset+1080+self.offset_left_right]

    cv2.imshow("Vive", vive_image)

def main(args):
  rospy.init_node("head_camera_to_vive", anonymous=True)
  ic = image_converter()
  cv2.namedWindow("Vive") #, cv2.WND_PROP_FULLSCREEN)          
  #cv2.setWindowProperty("Vive", cv2.WND_PROP_FULLSCREEN, cv2.cv.CV_WINDOW_FULLSCREEN)
  while not rospy.is_shutdown():
    key = cv2.waitKey(1)
    if key == 1048603: break

  cv2.destroyAllWindows()

if __name__ == '__main__':
    main(sys.argv)
